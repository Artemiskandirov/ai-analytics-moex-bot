from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import os, re
from .storage import Session, User, Portfolio
from .texts import HELLO
from .moex import quotes_shares, candles
from .levels import atr, educational_levels
from .llm import render_trial_note

router = Router()
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "demo_code")

def get_or_create_user(tg_id):
    s=Session()
    u=s.query(User).filter_by(tg_id=str(tg_id)).first()
    if not u:
        u=User(tg_id=str(tg_id)); s.add(u); s.commit()
        p=Portfolio(user_id=u.id); s.add(p); s.commit()
    s.close()
    return u

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏", callback_data="analyze_stock")],
        [InlineKeyboardButton(text="üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="my_portfolio")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="add_to_portfolio")],
        [InlineKeyboardButton(text="üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è", callback_data="portfolio_dynamics")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∞–∫—Ü–∏–π", callback_data="search_stocks")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

@router.message(Command("start"))
async def cmd_start(m: types.Message):
    get_or_create_user(m.from_user.id)
    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø MarketLens - —Ç–≤–æ–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞!

üöÄ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å 
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –î–∞–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    await m.answer(welcome_text, reply_markup=get_main_keyboard())

@router.message(Command("analyze"))
async def cmd_analyze(m: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = (m.text or "").split()
    if len(parts) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze <–¢–ò–ö–ï–†>\n–ü—Ä–∏–º–µ—Ä: /analyze SBER", reply_markup=get_main_keyboard())
        return
        
    ticker = parts[1].upper()
    await analyze_stock(m, ticker)

async def analyze_stock(m: types.Message, ticker: str):
    """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    q = quotes_shares([ticker]).get(ticker, {})
    if not q or not q.get("last"):
        await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–∫–µ—Ä—É {ticker}.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞.", reply_markup=get_main_keyboard())
        return
        
    board = q.get("board","TQBR") if q else "TQBR"
    cs = candles(ticker, board, 24)
    atr14 = None
    if cs:
        series = [{"high":c["high"],"low":c["low"],"close":c["close"]} for c in cs][-50:]
        atr14 = atr(series, period=14)
    
    levels = educational_levels(q.get("last"), atr14 or 1.0, support=(q.get("low") or 0), resistance=(q.get("high") or 0), k=1.5)
    note = render_trial_note(ticker, q, levels)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {ticker} –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data=f"add_{ticker}")],
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–æ–π –∞–∫—Ü–∏–∏", callback_data="analyze_stock")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await m.answer(note, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "main_menu")
async def callback_main_menu(callback: types.CallbackQuery):
    welcome_text = """üëã MarketLens - —Ç–≤–æ–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞!

üöÄ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å 
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –î–∞–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    await callback.message.edit_text(welcome_text, reply_markup=get_main_keyboard())

@router.callback_query(lambda c: c.data == "analyze_stock")
async def callback_analyze_stock(callback: types.CallbackQuery):
    await callback.message.edit_text("üìä –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n–ü—Ä–∏–º–µ—Ä: SBER, GAZP, LKOH\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /analyze –¢–ò–ö–ï–†")

@router.callback_query(lambda c: c.data == "my_portfolio")
async def callback_my_portfolio(callback: types.CallbackQuery):
    s = Session()
    u = s.query(User).filter_by(tg_id=str(callback.from_user.id)).first()
    portfolio = s.query(Portfolio).filter_by(user_id=u.id).first()
    
    if not portfolio.stocks:
        text = "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç\n\n–î–æ–±–∞–≤—å—Ç–µ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏!"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏–∏", callback_data="add_to_portfolio")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        # –ü–∞—Ä—Å–∏–º –∞–∫—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ JSON
        import json
        try:
            stocks = json.loads(portfolio.stocks)
            text = "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
            total_value = 0
            
            tickers = list(stocks.keys())
            quotes = quotes_shares(tickers)
            
            for ticker, quantity in stocks.items():
                quote = quotes.get(ticker, {})
                current_price = quote.get("last", 0)
                change_pct = quote.get("change_pct", 0)
                position_value = current_price * quantity
                total_value += position_value
                
                change_emoji = "üìà" if change_pct > 0 else "üìâ" if change_pct < 0 else "‚û°Ô∏è"
                text += f"{ticker}: {quantity} —à—Ç.\n"
                text += f"üí∞ {current_price:.2f} ‚ÇΩ {change_emoji} {change_pct:+.2f}%\n"
                text += f"üíµ –ü–æ–∑–∏—Ü–∏—è: {position_value:,.0f} ‚ÇΩ\n\n"
            
            text += f"üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:,.0f} ‚ÇΩ"
            
        except:
            text = "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –î–∏–Ω–∞–º–∏–∫–∞", callback_data="portfolio_dynamics")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_to_portfolio")],
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="main_menu")]
        ])
    
    s.close()
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "add_to_portfolio")
async def callback_add_to_portfolio(callback: types.CallbackQuery):
    text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–¢–ò–ö–ï–† –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ SBER 100
‚Ä¢ GAZP 50 LKOH 20
‚Ä¢ MOEX 30

–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–æ–∫–µ—Ä—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è üì±"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "portfolio_dynamics")
async def callback_portfolio_dynamics(callback: types.CallbackQuery):
    s = Session()
    u = s.query(User).filter_by(tg_id=str(callback.from_user.id)).first()
    portfolio = s.query(Portfolio).filter_by(user_id=u.id).first()
    
    if not portfolio.stocks:
        text = "üìà –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏–∏", callback_data="add_to_portfolio")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        try:
            import json
            stocks = json.loads(portfolio.stocks)
            text = "üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n\n"
            
            tickers = list(stocks.keys())
            quotes = quotes_shares(tickers)
            
            total_gain = 0
            total_positions = 0
            
            for ticker, quantity in stocks.items():
                quote = quotes.get(ticker, {})
                current_price = quote.get("last", 0)
                change_pct = quote.get("change_pct", 0)
                day_change = current_price * change_pct / 100
                position_change = day_change * quantity
                
                total_gain += position_change
                total_positions += 1
                
                change_emoji = "üü¢" if change_pct > 0 else "üî¥" if change_pct < 0 else "‚ö™"
                text += f"{change_emoji} {ticker}: {change_pct:+.2f}% ({position_change:+.0f} ‚ÇΩ)\n"
            
            avg_change = (total_gain / sum(quotes.get(t, {}).get("last", 1) * stocks[t] for t in tickers)) * 100 if tickers else 0
            
            text += f"\nüìä –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {total_gain:+.0f} ‚ÇΩ ({avg_change:+.2f}%)"
            
            if total_gain > 0:
                text += "\nüéâ –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ä–∞—Å—Ç–µ—Ç!"
            elif total_gain < 0:
                text += "\nüìâ –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è"
            else:
                text += "\n‚û°Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏: {e}"
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="my_portfolio")],
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="main_menu")]
        ])
    
    s.close()
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "search_stocks")
async def callback_search_stocks(callback: types.CallbackQuery):
    text = """üîç –ü–æ–∏—Å–∫ –∞–∫—Ü–∏–π

–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

üè¶ –ë–∞–Ω–∫–∏: SBER, VTB, AFKS
‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞: GAZP, LKOH, ROSN, NVTK
üíé –ú–µ—Ç–∞–ª–ª—ã: NLMK, MAGN, GMKN
üì± IT: YNDX, OZON, SFTL
üè™ –†–∏—Ç–µ–π–ª: MGNT, FIVE, LNTA

–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /analyze –¢–ò–ö–ï–†"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏", callback_data="analyze_stock")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "help")
async def callback_help(callback: types.CallbackQuery):
    text = """‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ MarketLens

ü§ñ –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /analyze –¢–ò–ö–ï–† - –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏

üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å:
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ–∑–∏—Ü–∏—è–º

üìä –ê–Ω–∞–ª–∏–∑:
‚Ä¢ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é
‚Ä¢ –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä:
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ callback
@router.callback_query(lambda c: c.data.startswith("add_"))
async def callback_add_specific_stock(callback: types.CallbackQuery):
    ticker = callback.data.split("_")[1]
    
    # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    s = Session()
    u = s.query(User).filter_by(tg_id=str(callback.from_user.id)).first()
    portfolio = s.query(Portfolio).filter_by(user_id=u.id).first()
    
    try:
        import json
        stocks = json.loads(portfolio.stocks) if portfolio.stocks else {}
        stocks[ticker] = stocks.get(ticker, 0) + 10  # –î–æ–±–∞–≤–ª—è–µ–º 10 –∞–∫—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        portfolio.stocks = json.dumps(stocks)
        s.commit()
        
        text = f"‚úÖ {ticker} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å (+10 —à—Ç.)\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏!"
        
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="my_portfolio")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    s.close()
    await callback.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
@router.message()
async def handle_text_messages(m: types.Message):
    text = (m.text or "").strip()
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–∞ "SBER 100 GAZP 50"
    pattern = r'([A-Z]{3,6})\s+(\d+)'
    matches = re.findall(pattern, text.upper())
    
    if matches:
        s = Session()
        u = s.query(User).filter_by(tg_id=str(m.from_user.id)).first()
        if not u:
            get_or_create_user(m.from_user.id)
            u = s.query(User).filter_by(tg_id=str(m.from_user.id)).first()
        
        portfolio = s.query(Portfolio).filter_by(user_id=u.id).first()
        
        try:
            import json
            stocks = json.loads(portfolio.stocks) if portfolio.stocks else {}
            
            added_stocks = []
            for ticker, quantity in matches:
                stocks[ticker] = int(quantity)
                added_stocks.append(f"{ticker}: {quantity} —à—Ç.")
            
            portfolio.stocks = json.dumps(stocks)
            s.commit()
            
            response = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n" + "\n".join(added_stocks)
            response += f"\n\nüíº –í—Å–µ–≥–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(stocks)} –ø–æ–∑–∏—Ü–∏–π"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíº –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="my_portfolio")],
                [InlineKeyboardButton(text="üìà –î–∏–Ω–∞–º–∏–∫–∞", callback_data="portfolio_dynamics")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await m.answer(response, reply_markup=keyboard)
            
        except Exception as e:
            await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π: {e}")
        
        s.close()
    else:
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await m.answer("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–¢–ò–ö–ï–† –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n–ü—Ä–∏–º–µ—Ä: SBER 100", 
                      reply_markup=get_main_keyboard())
