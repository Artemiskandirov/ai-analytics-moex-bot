import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from .config import TIMEZONE, POLL_SEC
from .storage import Session, User, Portfolio, Position, EventLog
from .llm import render_digest
from .moex import quotes_shares
import json
from collections import defaultdict

def start_scheduler(bot):
    tz = pytz.timezone(TIMEZONE)
    sch = AsyncIOScheduler(timezone=tz)

    async def morning():
        s=Session()
        for u in s.query(User).all():
            if u.plan!="premium": continue
            await bot.send_message(int(u.tg_id),
                render_digest("–£—Ç—Ä–æ", ["–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è", "–£—Ä–æ–≤–Ω–∏ –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ —Ç–≤–æ–∏–º –±—É–º–∞–≥–∞–º"]))
        s.close()

    async def midday():
        s=Session()
        for u in s.query(User).all():
            if u.plan!="premium": continue
            await bot.send_message(int(u.tg_id),
                render_digest("–°–µ—Ä–µ–¥–∏–Ω–∞ –¥–Ω—è", ["–†—ã–Ω–æ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–º"]))
        s.close()

    async def evening():
        s=Session()
        for u in s.query(User).all():
            if u.plan!="premium": continue
            await bot.send_message(int(u.tg_id),
                render_digest("–ò—Ç–æ–≥–∏ –¥–Ω—è", ["–õ–∏–¥–µ—Ä—ã/–∞—É—Ç—Å–∞–π–¥–µ—Ä—ã –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é", "–ß—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≤—Ç—Ä–∞"]))
        s.close()

    sch.add_job(morning, "cron", hour=8, minute=30)
    sch.add_job(midday,  "cron", hour=15, minute=0)
    sch.add_job(evening, "cron", hour=18, minute=30)

    async def triggers_job():
        s = Session()
        try:
            users = s.query(User).all()
            for u in users:
                if u.plan != "premium" or not u.plan_valid_to or u.plan_valid_to <= datetime.utcnow():
                    continue
                pf = s.query(Portfolio).filter_by(user_id=u.id).first()
                if not pf: continue
                positions = s.query(Position).filter_by(portfolio_id=pf.id).all()
                if not positions: continue
                boards = defaultdict(list)
                for p in positions:
                    if p.board in ("TQBR","TQTF","TQOB"):
                        boards[p.board].append(p.ticker)
                quotes = {}
                if boards.get("TQBR"):
                    quotes.update(quotes_shares(list(set(boards["TQBR"]))))
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É ETF –∏ –æ–±–ª–∏–≥–∞—Ü–∏–π –≤ –±—É–¥—É—â–µ–º
                # if boards.get("TQTF"):
                #     quotes.update(quotes_etf(list(set(boards["TQTF"]))))
                # if boards.get("TQOB"):
                #     quotes.update(quotes_bonds(list(set(boards["TQOB"]))))
                def daily_count(uid):
                    today = datetime.utcnow().date()
                    start = datetime(today.year, today.month, today.day)
                    return s.query(EventLog).filter(EventLog.user_id==uid, EventLog.sent_at>=start).count()
                def recent(uid,ticker,mins=20):
                    since = datetime.utcnow()- timedelta(minutes=mins)
                    return s.query(EventLog).filter(EventLog.user_id==uid, EventLog.ticker==ticker, EventLog.sent_at>=since).count()>0
                for p in positions:
                    t = p.ticker
                    q = quotes.get(t)
                    if not q: continue
                    ch = q.get("change_pct")
                    if ch is None: continue
                    try:
                        if abs(float(ch)) >= 5 and not recent(u.id,ticker=t) and daily_count(u.id) < 8:
                            text = f"‚ö° –°–æ–±—ã—Ç–∏–µ –ø–æ {t}: –∑–Ω–∞—á–∏–º–æ–µ –¥–Ω–µ–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (—Ü–µ–Ω–∞ {q.get('last')}, Œî–¥–µ–Ω—å {ch}%).\n"                                    f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç —Ç–∞–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–∫ –≤–∞–∂–Ω—ã–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è.\n"                                    f"‚ÑπÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω–≤–µ—Å—Ç—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π."
                            await bot.send_message(int(u.tg_id), text)
                            ev = EventLog(user_id=u.id, ticker=t, event_type="trigger", payload={"change_pct":ch}, sent_at=datetime.utcnow())
                            s.add(ev); s.commit()
                    except Exception:
                        pass
        finally:
            s.close()

    async def check_portfolio_alerts():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (2%+) –±–µ–∑ GPT - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        s = Session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏
            portfolios = s.query(Portfolio).filter(Portfolio.stocks.isnot(None)).all()
            
            for portfolio in portfolios:
                try:
                    stocks = json.loads(portfolio.stocks)
                    if not stocks:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
                    tickers = list(stocks.keys())
                    quotes = quotes_shares(tickers)
                    
                    alerts = []
                    total_change = 0
                    
                    for ticker, quantity in stocks.items():
                        quote = quotes.get(ticker, {})
                        change_pct = quote.get("change_pct", 0)
                        current_price = quote.get("last", 0)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if abs(change_pct) >= 2.0:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 2%
                            emoji = "üöÄ" if change_pct > 0 else "üìâ"
                            position_change = current_price * change_pct / 100 * quantity
                            alerts.append(f"{emoji} {ticker}: {change_pct:+.1f}% ({position_change:+.0f} ‚ÇΩ)")
                        
                        total_change += current_price * change_pct / 100 * quantity
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if alerts:
                        user = s.query(User).filter_by(id=portfolio.user_id).first()
                        
                        alert_text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:\n\n" + "\n".join(alerts)
                        alert_text += f"\n\nüíº –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {total_change:+.0f} ‚ÇΩ"
                        
                        if abs(total_change) >= 1000:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                            alert_text += "\n\nüìä –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"
                        
                        await bot.send_message(chat_id=user.tg_id, text=alert_text)
                        print(f"Portfolio alert sent to user {user.tg_id}: {len(alerts)} changes")
                        
                except Exception as e:
                    print(f"Error checking portfolio {portfolio.id}: {e}")
                    
        except Exception as e:
            print(f"Error in portfolio alerts: {e}")
        finally:
            s.close()

    sch.add_job(triggers_job, "interval", seconds=POLL_SEC)
    sch.add_job(check_portfolio_alerts, "interval", minutes=1)  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    sch.start()
